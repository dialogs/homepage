name: Develop CI

on: push

jobs:
  build-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@master
      - name: Generate build number
        uses: einaregilsson/build-number@v1
        with:
          token: ${{secrets.github_token}}
      - name: Version notify
        run: |
          curl --header 'Content-Type: application/json' --request POST \
          --data "{\"text\": \"üëâüèæ Homepage build *#${BUILD_NUMBER}*: pipeline started.\"}" \
          ${{ secrets.TEST_WEBHOOK }}
      - name: Build
        env:
          EMAIL_USER: ${{secrets.EMAIL_USER}}
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
          GHOST_ENDPOINT: ${{ secrets.GHOST_ENDPOINT }}
          GHOST_API_KEY: ${{ secrets.GHOST_API_KEY }}
          MAILCHIMP_KEY: ${{ secrets.MAILCHIMP_KEY }}
          MAILCHIMP_LIST_RU: ${{ secrets.MAILCHIMP_LIST_RU }}
          MAILCHIMP_LIST_EN: ${{ secrets.MAILCHIMP_LIST_EN }}
          GATSBY_GRAPHQL_IDE: playground
          DIALOG_WEBHOOK: ${{ secrets.TEST_WEBHOOK }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          SENTRY_DSN_PUBLIC: ${{ secrets.SENTRY_DSN_PUBLIC }}
        run: |
          npm ci
          npm run build
          curl --header 'Content-Type: application/json' --request POST \
          --data "{\"text\": \"üëåüèæ Homepage build *#$BUILD_NUMBER*: application build successful.\"}" \
          ${{ secrets.TEST_WEBHOOK }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v1
        with:
          name: app
          path: public
      - name: Upload build number
        uses: actions/upload-artifact@v1
        with:
          name: BUILD_NUMBER
          path: BUILD_NUMBER

  version:
    needs: build-app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@master
      - name: Configure git
        run: |
          git config user.name ${{ secrets.GITHUB_BOT_USERNAME }}
          git config user.email ${{ secrets.GITHUB_BOT_EMAIL }}
          git remote set-url origin https://${{ secrets.GITHUB_BOT_TOKEN }}@github.com/dialogs/homepage.git
      - name: Configure bot
        run: |
          if [[ "${{ github.actor }}" != "dialog-bot" ]]
          then
            sudo apt-get update
            sudo apt-get install gnupg2 -y
            echo "${{ secrets.GITHUB_BOT_GPG_KEY }}" > private.key
            gpg2 --allow-secret-key-import --import private.key
            git config gpg.program gpg2
            git config commit.gpgsign true
            git config user.signingkey "${{ secrets.GITHUB_BOT_GPG_KEY_ID }}"
            git config credential.helper 'cache --timeout=120'
            git config user.name "${{ secrets.GITHUB_BOT_USERNAME }}"
            git config user.email "${{ secrets.GITHUB_BOT_EMAIL }}"
          fi
      - name: Version bump
        if: github.actor != 'dialog-bot'
        run: |
          git checkout master
          npm install -g npm
          npm version patch
          git push --follow-tags
      - name: (Exception step) Version bump
        if: failure()
        uses: dialogs/dialog-notify-action@master
        with:
          url: ${{ secrets.TEST_WEBHOOK }}
          message: ' Homepage version bump failed: '

  build-docker:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Download app build artifact
        uses: actions/download-artifact@v1
        with:
          name: app
          path: public
      - name: Download app build artifact
        uses: actions/download-artifact@v1
        with:
          name: BUILD_NUMBER
      - name: Restore build number
        uses: einaregilsson/build-number@v1
      - name: Build the Docker image
        env:
          DOCKER_IMAGE: docker.pkg.github.com/dialogs/homepage/homepage
        run: |
          VERSION=$(node -p "require('./package.json').version")
          IMAGE_VERSION="${VERSION}.$BUILD_NUMBER"
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
          docker build -t $DOCKER_IMAGE:$IMAGE_VERSION .
          docker tag $DOCKER_IMAGE:$IMAGE_VERSION $DOCKER_IMAGE:latest
          docker push $DOCKER_IMAGE:$IMAGE_VERSION
      - name: Notify
        run: |
          curl --header 'Content-Type: application/json' --request POST \
          --data "{\"text\": \"üëåüèæ Homepage build *#$BUILD_NUMBER*: docker image ready. \"}" \
          ${{ secrets.TEST_WEBHOOK }}
      - name: Deploy
        run: curl -X POST "https://${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_PASS }}@jenkins.transmit.im/job/Web/job/web-apps%20deploy/buildWithParameters?token=${{ secrets.JENKINS_TOKEN }}&aapp=beta&image=$DOCKER_IMAGE:$IMAGE_VERSION"
      - name: Exepction
        if: failure()
        run: |
          curl --header 'Content-Type: application/json' --request POST \
          --data "{\"text\": \"üñïüèæ Homepage build *#${BUILD_NUMBER}:* pipeline failed. [More info](https://github.com/dialogs/dialog-web-platform/commit/${GITHUB_SHA}/checks)\"}" \
          $TEST_WEBHOOK
